package com.abidsaleh.employeemanagement;

import com.abidsaleh.employeemanagement.model.Employee;
import com.abidsaleh.employeemanagement.service.EmployeeService;
import io.swagger.annotations.ApiOperation;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/employee")
public class EmployeeResource {

    private final EmployeeService employeeService;

    public EmployeeResource(EmployeeService employeeService) {
        this.employeeService = employeeService;
    }

    @GetMapping("/all")
    @ApiOperation(value = "Gets List of All Employees ")
    public ResponseEntity<List<Employee>> getAllEmployees(){
        List<Employee> employees = employeeService.findAllEmployees();
        return  new ResponseEntity<>(employees, HttpStatus.OK);
    }

    @GetMapping("/find/{id}")
    @ApiOperation(value = "Finds Employee By Id",
        notes = "Provide an id to look up specific employee")
    public ResponseEntity<Employee> getEmployeeByID(@PathVariable("id") Long id){
        Employee employee = employeeService.findEmployeeById(id);
        return  new ResponseEntity<>(employee, HttpStatus.OK);
    }

    @PostMapping("/add")
    @ApiOperation(value = "Adds a new Employee to the system ",
            notes = "Provide the information of new employee in json format. " +
                    "Id and EmployeeCode will be generated by system")
    public ResponseEntity<Employee> addEmployee(@RequestBody Employee employee){
        Employee newEmployee = employeeService.addEmployee(employee);
        return  new ResponseEntity<>(newEmployee, HttpStatus.OK);
    }

    @PutMapping("/update")
    @ApiOperation(value = "Updates Data about existing Employee ",
            notes = "Provide the information of new employee in json format. " +
                    "Cannot Update Id or EmployeeCode")
    public ResponseEntity<Employee> updateEmployee(@RequestBody Employee employee){
        Employee updateEmployee = employeeService.updateEmployee(employee);
        return  new ResponseEntity<>(updateEmployee, HttpStatus.OK);
    }

    @DeleteMapping("/delete/{id}")
    @ApiOperation(value = "Deletes an existing Employee from the system",
            notes = "Provide an id to look up specific employee")
    public ResponseEntity<?> deleteEmployee(@PathVariable ("id") Long id){
        employeeService.deleteEmployee(id);
        return  new ResponseEntity<>( HttpStatus.OK);
    }
}
